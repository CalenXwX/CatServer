--- a/net/minecraft/server/Bootstrap.java
+++ b/net/minecraft/server/Bootstrap.java
@@ -1,12 +_,14 @@
 package net.minecraft.server;
 
 import com.mojang.logging.LogUtils;
+
 import java.io.PrintStream;
 import java.util.List;
 import java.util.Set;
 import java.util.TreeSet;
 import java.util.function.Function;
 import java.util.function.Supplier;
+
 import net.minecraft.SharedConstants;
 import net.minecraft.Util;
 import net.minecraft.commands.Commands;
@@ -18,6 +_,9 @@
 import net.minecraft.core.dispenser.DispenseItemBehavior;
 import net.minecraft.data.BuiltinRegistries;
 import net.minecraft.locale.Language;
+import net.minecraft.util.datafix.fixes.BlockStateData;
+import net.minecraft.util.datafix.fixes.ItemIdFix;
+import net.minecraft.util.datafix.fixes.ItemSpawnEggFix;
 import net.minecraft.world.effect.MobEffect;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.entity.ai.attributes.Attribute;
@@ -34,127 +_,206 @@
 import org.slf4j.Logger;
 
 public class Bootstrap {
-   public static final PrintStream f_135866_ = System.out;
-   private static volatile boolean f_135867_;
-   private static final Logger f_135868_ = LogUtils.getLogger();
+    public static final PrintStream f_135866_ = System.out;
+    private static volatile boolean f_135867_;
+    private static final Logger f_135868_ = LogUtils.getLogger();
 
-   public static void m_135870_() {
-      if (!f_135867_) {
-         f_135867_ = true;
-         if (Registry.f_122897_.m_6566_().isEmpty()) {
-            throw new IllegalStateException("Unable to load registries");
-         } else {
-            FireBlock.m_53484_();
-            ComposterBlock.m_51988_();
-            if (EntityType.m_20613_(EntityType.f_20532_) == null) {
-               throw new IllegalStateException("Failed loading EntityTypes");
+    public static void m_135870_() {
+        if (!f_135867_) {
+            /*
+            // CraftBukkit start
+            String name = Bootstrap.class.getSimpleName();
+            switch (name) {
+                case "DispenserRegistry":
+                    break;
+                case "Bootstrap":
+                    System.err.println("***************************************************************************");
+                    System.err.println("*** WARNING: This server jar may only be used for development purposes. ***");
+                    System.err.println("***************************************************************************");
+                    break;
+                default:
+                    System.err.println("**********************************************************************");
+                    System.err.println("*** WARNING: This server jar is unsupported, use at your own risk. ***");
+                    System.err.println("**********************************************************************");
+                    break;
+            }
+            // CraftBukkit end
+            */
+            f_135867_ = true;
+            if (Registry.f_122897_.m_6566_().isEmpty()) {
+                throw new IllegalStateException("Unable to load registries");
             } else {
-               PotionBrewing.m_43499_();
-               EntitySelectorOptions.m_121426_();
-               DispenseItemBehavior.m_123402_();
-               CauldronInteraction.m_175649_();
-               ArgumentTypes.m_121586_();
-               Registry.m_206101_();
-               m_135890_();
-            }
-         }
-      }
-   }
-
-   private static <T> void m_135871_(Iterable<T> p_135872_, Function<T, String> p_135873_, Set<String> p_135874_) {
-      Language language = Language.m_128107_();
-      p_135872_.forEach((p_135883_) -> {
-         String s = p_135873_.apply(p_135883_);
-         if (!language.m_6722_(s)) {
-            p_135874_.add(s);
-         }
-
-      });
-   }
-
-   private static void m_135877_(final Set<String> p_135878_) {
-      final Language language = Language.m_128107_();
-      GameRules.m_46164_(new GameRules.GameRuleTypeVisitor() {
-         public <T extends GameRules.Value<T>> void m_6889_(GameRules.Key<T> p_135897_, GameRules.Type<T> p_135898_) {
-            if (!language.m_6722_(p_135897_.m_46331_())) {
-               p_135878_.add(p_135897_.m_46328_());
-            }
-
-         }
-      });
-   }
-
-   public static Set<String> m_135886_() {
-      Set<String> set = new TreeSet<>();
-      m_135871_(Registry.f_122866_, Attribute::m_22087_, set);
-      m_135871_(Registry.f_122826_, EntityType::m_20675_, set);
-      m_135871_(Registry.f_122823_, MobEffect::m_19481_, set);
-      m_135871_(Registry.f_122827_, Item::m_5524_, set);
-      m_135871_(Registry.f_122825_, Enchantment::m_44704_, set);
-      m_135871_(Registry.f_122824_, Block::m_7705_, set);
-      m_135871_(Registry.f_122832_, (p_135885_) -> {
-         return "stat." + p_135885_.toString().replace(':', '.');
-      }, set);
-      m_135877_(set);
-      return set;
-   }
-
-   public static void m_179912_(Supplier<String> p_179913_) {
-      if (!f_135867_) {
-         throw m_179916_(p_179913_);
-      }
-   }
-
-   private static RuntimeException m_179916_(Supplier<String> p_179917_) {
-      try {
-         String s = p_179917_.get();
-         return new IllegalArgumentException("Not bootstrapped (called from " + s + ")");
-      } catch (Exception exception) {
-         RuntimeException runtimeexception = new IllegalArgumentException("Not bootstrapped (failed to resolve location)");
-         runtimeexception.addSuppressed(exception);
-         return runtimeexception;
-      }
-   }
-
-   public static void m_135889_() {
-      m_179912_(() -> {
-         return "validate";
-      });
-      if (SharedConstants.f_136183_) {
-         m_135886_().forEach((p_179915_) -> {
-            f_135868_.error("Missing translations: {}", (Object)p_179915_);
-         });
-         Commands.m_82138_();
-         m_197757_();
-      }
-
-      DefaultAttributes.m_22296_();
-   }
-
-   private static void m_197757_() {
-      BuiltinRegistries.f_123865_.m_123024_().forEach((p_197754_) -> {
-         List<HolderSet<PlacedFeature>> list = p_197754_.m_47536_().m_47818_();
-         list.stream().flatMap(HolderSet::m_203614_).forEach((p_206844_) -> {
-            if (!((PlacedFeature)p_206844_.m_203334_()).f_191776_().contains(BiomeFilter.m_191561_())) {
-               Util.m_143785_("Placed feature " + BuiltinRegistries.f_194653_.m_7854_((PlacedFeature)p_206844_.m_203334_()) + " is missing BiomeFilter.biome()");
-            }
-
-         });
-      });
-   }
-
-   private static void m_135890_() {
-      if (f_135868_.isDebugEnabled()) {
-         System.setErr(new DebugLoggedPrintStream("STDERR", System.err));
-         System.setOut(new DebugLoggedPrintStream("STDOUT", f_135866_));
-      } else {
-         System.setErr(new LoggedPrintStream("STDERR", System.err));
-         System.setOut(new LoggedPrintStream("STDOUT", f_135866_));
-      }
-
-   }
-
-   public static void m_135875_(String p_135876_) {
-      f_135866_.println(p_135876_);
-   }
+                FireBlock.m_53484_();
+                ComposterBlock.m_51988_();
+                if (EntityType.m_20613_(EntityType.f_20532_) == null) {
+                    throw new IllegalStateException("Failed loading EntityTypes");
+                } else {
+                    PotionBrewing.m_43499_();
+                    EntitySelectorOptions.m_121426_();
+                    DispenseItemBehavior.m_123402_();
+                    CauldronInteraction.m_175649_();
+                    ArgumentTypes.m_121586_();
+                    Registry.m_206101_();
+                    net.minecraftforge.registries.GameData.vanillaSnapshot();
+                    if (false) // skip redirectOutputToLog, Forge already redirects stdout and stderr output to log so that they print with more context
+                        m_135890_();
+                }
+                // CraftBukkit start - easier than fixing the decompile
+                BlockStateData.m_14942_(1008, "{Name:'minecraft:oak_sign',Properties:{rotation:'0'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'0'}}");
+                BlockStateData.m_14942_(1009, "{Name:'minecraft:oak_sign',Properties:{rotation:'1'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'1'}}");
+                BlockStateData.m_14942_(1010, "{Name:'minecraft:oak_sign',Properties:{rotation:'2'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'2'}}");
+                BlockStateData.m_14942_(1011, "{Name:'minecraft:oak_sign',Properties:{rotation:'3'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'3'}}");
+                BlockStateData.m_14942_(1012, "{Name:'minecraft:oak_sign',Properties:{rotation:'4'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'4'}}");
+                BlockStateData.m_14942_(1013, "{Name:'minecraft:oak_sign',Properties:{rotation:'5'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'5'}}");
+                BlockStateData.m_14942_(1014, "{Name:'minecraft:oak_sign',Properties:{rotation:'6'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'6'}}");
+                BlockStateData.m_14942_(1015, "{Name:'minecraft:oak_sign',Properties:{rotation:'7'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'7'}}");
+                BlockStateData.m_14942_(1016, "{Name:'minecraft:oak_sign',Properties:{rotation:'8'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'8'}}");
+                BlockStateData.m_14942_(1017, "{Name:'minecraft:oak_sign',Properties:{rotation:'9'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'9'}}");
+                BlockStateData.m_14942_(1018, "{Name:'minecraft:oak_sign',Properties:{rotation:'10'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'10'}}");
+                BlockStateData.m_14942_(1019, "{Name:'minecraft:oak_sign',Properties:{rotation:'11'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'11'}}");
+                BlockStateData.m_14942_(1020, "{Name:'minecraft:oak_sign',Properties:{rotation:'12'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'12'}}");
+                BlockStateData.m_14942_(1021, "{Name:'minecraft:oak_sign',Properties:{rotation:'13'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'13'}}");
+                BlockStateData.m_14942_(1022, "{Name:'minecraft:oak_sign',Properties:{rotation:'14'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'14'}}");
+                BlockStateData.m_14942_(1023, "{Name:'minecraft:oak_sign',Properties:{rotation:'15'}}", "{Name:'minecraft:standing_sign',Properties:{rotation:'15'}}");
+                ItemIdFix.f_15937_.put(323, "minecraft:oak_sign");
+                BlockStateData.m_14942_(1440, "{Name:\'minecraft:portal\',Properties:{axis:\'x\'}}", new String[]{"{Name:\'minecraft:portal\',Properties:{axis:\'x\'}}"});
+                ItemIdFix.f_15937_.put(409, "minecraft:prismarine_shard");
+                ItemIdFix.f_15937_.put(410, "minecraft:prismarine_crystals");
+                ItemIdFix.f_15937_.put(411, "minecraft:rabbit");
+                ItemIdFix.f_15937_.put(412, "minecraft:cooked_rabbit");
+                ItemIdFix.f_15937_.put(413, "minecraft:rabbit_stew");
+                ItemIdFix.f_15937_.put(414, "minecraft:rabbit_foot");
+                ItemIdFix.f_15937_.put(415, "minecraft:rabbit_hide");
+                ItemIdFix.f_15937_.put(416, "minecraft:armor_stand");
+                ItemIdFix.f_15937_.put(423, "minecraft:mutton");
+                ItemIdFix.f_15937_.put(424, "minecraft:cooked_mutton");
+                ItemIdFix.f_15937_.put(425, "minecraft:banner");
+                ItemIdFix.f_15937_.put(426, "minecraft:end_crystal");
+                ItemIdFix.f_15937_.put(427, "minecraft:spruce_door");
+                ItemIdFix.f_15937_.put(428, "minecraft:birch_door");
+                ItemIdFix.f_15937_.put(429, "minecraft:jungle_door");
+                ItemIdFix.f_15937_.put(430, "minecraft:acacia_door");
+                ItemIdFix.f_15937_.put(431, "minecraft:dark_oak_door");
+                ItemIdFix.f_15937_.put(432, "minecraft:chorus_fruit");
+                ItemIdFix.f_15937_.put(433, "minecraft:chorus_fruit_popped");
+                ItemIdFix.f_15937_.put(434, "minecraft:beetroot");
+                ItemIdFix.f_15937_.put(435, "minecraft:beetroot_seeds");
+                ItemIdFix.f_15937_.put(436, "minecraft:beetroot_soup");
+                ItemIdFix.f_15937_.put(437, "minecraft:dragon_breath");
+                ItemIdFix.f_15937_.put(438, "minecraft:splash_potion");
+                ItemIdFix.f_15937_.put(439, "minecraft:spectral_arrow");
+                ItemIdFix.f_15937_.put(440, "minecraft:tipped_arrow");
+                ItemIdFix.f_15937_.put(441, "minecraft:lingering_potion");
+                ItemIdFix.f_15937_.put(442, "minecraft:shield");
+                ItemIdFix.f_15937_.put(443, "minecraft:elytra");
+                ItemIdFix.f_15937_.put(444, "minecraft:spruce_boat");
+                ItemIdFix.f_15937_.put(445, "minecraft:birch_boat");
+                ItemIdFix.f_15937_.put(446, "minecraft:jungle_boat");
+                ItemIdFix.f_15937_.put(447, "minecraft:acacia_boat");
+                ItemIdFix.f_15937_.put(448, "minecraft:dark_oak_boat");
+                ItemIdFix.f_15937_.put(449, "minecraft:totem_of_undying");
+                ItemIdFix.f_15937_.put(450, "minecraft:shulker_shell");
+                ItemIdFix.f_15937_.put(452, "minecraft:iron_nugget");
+                ItemIdFix.f_15937_.put(453, "minecraft:knowledge_book");
+                ItemSpawnEggFix.f_16031_[23] = "Arrow";
+                // CraftBukkit end
+            }
+        }
+    }
+
+    private static <T> void m_135871_(Iterable<T> p_135872_, Function<T, String> p_135873_, Set<String> p_135874_) {
+        Language language = Language.m_128107_();
+        p_135872_.forEach((p_135883_) -> {
+            String s = p_135873_.apply(p_135883_);
+            if (!language.m_6722_(s)) {
+                p_135874_.add(s);
+            }
+
+        });
+    }
+
+    private static void m_135877_(final Set<String> p_135878_) {
+        final Language language = Language.m_128107_();
+        GameRules.m_46164_(new GameRules.GameRuleTypeVisitor() {
+            public <T extends GameRules.Value<T>> void m_6889_(GameRules.Key<T> p_135897_, GameRules.Type<T> p_135898_) {
+                if (!language.m_6722_(p_135897_.m_46331_())) {
+                    p_135878_.add(p_135897_.m_46328_());
+                }
+
+            }
+        });
+    }
+
+    public static Set<String> m_135886_() {
+        Set<String> set = new TreeSet<>();
+        m_135871_(Registry.f_122866_, Attribute::m_22087_, set);
+        m_135871_(Registry.f_122826_, EntityType::m_20675_, set);
+        m_135871_(Registry.f_122823_, MobEffect::m_19481_, set);
+        m_135871_(Registry.f_122827_, Item::m_5524_, set);
+        m_135871_(Registry.f_122825_, Enchantment::m_44704_, set);
+        m_135871_(Registry.f_122824_, Block::m_7705_, set);
+        m_135871_(Registry.f_122832_, (p_135885_) -> {
+            return "stat." + p_135885_.toString().replace(':', '.');
+        }, set);
+        m_135877_(set);
+        return set;
+    }
+
+    public static void m_179912_(Supplier<String> p_179913_) {
+        if (!f_135867_) {
+            throw m_179916_(p_179913_);
+        }
+    }
+
+    private static RuntimeException m_179916_(Supplier<String> p_179917_) {
+        try {
+            String s = p_179917_.get();
+            return new IllegalArgumentException("Not bootstrapped (called from " + s + ")");
+        } catch (Exception exception) {
+            RuntimeException runtimeexception = new IllegalArgumentException("Not bootstrapped (failed to resolve location)");
+            runtimeexception.addSuppressed(exception);
+            return runtimeexception;
+        }
+    }
+
+    public static void m_135889_() {
+        m_179912_(() -> {
+            return "validate";
+        });
+        if (SharedConstants.f_136183_) {
+            m_135886_().forEach((p_179915_) -> {
+                f_135868_.error("Missing translations: {}", (Object) p_179915_);
+            });
+            Commands.m_82138_();
+            m_197757_();
+        }
+
+    }
+
+    private static void m_197757_() {
+        BuiltinRegistries.f_123865_.m_123024_().forEach((p_197754_) -> {
+            List<HolderSet<PlacedFeature>> list = p_197754_.m_47536_().m_47818_();
+            list.stream().flatMap(HolderSet::m_203614_).forEach((p_206844_) -> {
+                if (!((PlacedFeature) p_206844_.m_203334_()).f_191776_().contains(BiomeFilter.m_191561_())) {
+                    Util.m_143785_("Placed feature " + BuiltinRegistries.f_194653_.m_7854_((PlacedFeature) p_206844_.m_203334_()) + " is missing BiomeFilter.biome()");
+                }
+
+            });
+        });
+    }
+
+    private static void m_135890_() {
+        if (f_135868_.isDebugEnabled()) {
+            System.setErr(new DebugLoggedPrintStream("STDERR", System.err));
+            System.setOut(new DebugLoggedPrintStream("STDOUT", f_135866_));
+        } else {
+            System.setErr(new LoggedPrintStream("STDERR", System.err));
+            System.setOut(new LoggedPrintStream("STDOUT", f_135866_));
+        }
+
+    }
+
+    public static void m_135875_(String p_135876_) {
+        f_135866_.println(p_135876_);
+    }
 }
