--- a/net/minecraft/network/syncher/SynchedEntityData.java
+++ b/net/minecraft/network/syncher/SynchedEntityData.java
@@ -8,11 +_,6 @@
 import it.unimi.dsi.fastutil.ints.Int2ObjectOpenHashMap;
 import it.unimi.dsi.fastutil.objects.Object2IntMap;
 import it.unimi.dsi.fastutil.objects.Object2IntOpenHashMap;
-import java.util.List;
-import java.util.Objects;
-import java.util.concurrent.locks.ReadWriteLock;
-import java.util.concurrent.locks.ReentrantReadWriteLock;
-import javax.annotation.Nullable;
 import net.minecraft.CrashReport;
 import net.minecraft.CrashReportCategory;
 import net.minecraft.ReportedException;
@@ -21,6 +_,12 @@
 import org.apache.commons.lang3.ObjectUtils;
 import org.slf4j.Logger;
 
+import javax.annotation.Nullable;
+import java.util.List;
+import java.util.Objects;
+import java.util.concurrent.locks.ReadWriteLock;
+import java.util.concurrent.locks.ReentrantReadWriteLock;
+
 public class SynchedEntityData {
    private static final Logger f_135342_ = LogUtils.getLogger();
    private static final Object2IntMap<Class<? extends Entity>> f_135343_ = new Object2IntOpenHashMap<>();
@@ -37,11 +_,13 @@
    }
 
    public static <T> EntityDataAccessor<T> m_135353_(Class<? extends Entity> p_135354_, EntityDataSerializer<T> p_135355_) {
-      if (f_135342_.isDebugEnabled()) {
+      if (true || f_135342_.isDebugEnabled()) { // Forge: This is very useful for mods that register keys on classes that are not their own
          try {
             Class<?> oclass = Class.forName(Thread.currentThread().getStackTrace()[2].getClassName());
             if (!oclass.equals(p_135354_)) {
-               f_135342_.debug("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+               // Forge: log at warn, mods should not add to classes that they don't own, and only add stacktrace when in debug is enabled as it is mostly not needed and consumes time
+               if (f_135342_.isDebugEnabled()) f_135342_.warn("defineId called for: {} from {}", p_135354_, oclass, new RuntimeException());
+               else f_135342_.warn("defineId called for: {} from {}", p_135354_, oclass);
             }
          } catch (ClassNotFoundException classnotfoundexception) {
          }
@@ -260,6 +_,13 @@
 
       this.f_135346_.readLock().unlock();
    }
+
+   // CraftBukkit start - add method from above
+   public <T> void markDirty(EntityDataAccessor<T> datawatcherobject) {
+      this.m_135379_(datawatcherobject).m_135401_(true);
+      this.f_135348_ = true;
+   }
+   // CraftBukkit end
 
    public static class DataItem<T> {
       final EntityDataAccessor<T> f_135390_;
