--- a/net/minecraft/world/level/chunk/storage/RegionFile.java
+++ b/net/minecraft/world/level/chunk/storage/RegionFile.java
@@ -2,12 +_,12 @@
 
 import com.google.common.annotations.VisibleForTesting;
 import com.mojang.logging.LogUtils;
-import java.io.ByteArrayInputStream;
-import java.io.ByteArrayOutputStream;
-import java.io.DataInputStream;
-import java.io.DataOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
+import net.minecraft.Util;
+import net.minecraft.world.level.ChunkPos;
+import org.slf4j.Logger;
+
+import javax.annotation.Nullable;
+import java.io.*;
 import java.nio.ByteBuffer;
 import java.nio.IntBuffer;
 import java.nio.channels.FileChannel;
@@ -15,10 +_,6 @@
 import java.nio.file.Path;
 import java.nio.file.StandardCopyOption;
 import java.nio.file.StandardOpenOption;
-import javax.annotation.Nullable;
-import net.minecraft.Util;
-import net.minecraft.world.level.ChunkPos;
-import org.slf4j.Logger;
 
 public class RegionFile implements AutoCloseable {
    private static final Logger f_63619_ = LogUtils.getLogger();
@@ -76,6 +_,16 @@
                if (l != 0) {
                   int i1 = m_63671_(l);
                   int j1 = m_63640_(l);
+
+                  // Spigot start
+                  if (j1 == 255) {
+                     // We're maxed out, so we need to read the proper length from the section
+                     ByteBuffer realLen = ByteBuffer.allocate(4);
+                     this.f_63621_.read(realLen, i1 * 4096);
+                     j1 = (realLen.getInt(0) + 4) / 4096 + 1;
+                  }
+                  // Spigot end
+
                   if (i1 < 2) {
                      f_63619_.warn("Region file {} has invalid sector at index: {}; sector {} overlaps with header", p_63633_, k, i1);
                      this.f_63625_.put(k, 0);
@@ -108,6 +_,13 @@
       } else {
          int j = m_63671_(i);
          int k = m_63640_(i);
+         // Spigot start
+         if (k == 255) {
+            ByteBuffer realLen = ByteBuffer.allocate(4);
+            this.f_63621_.read(realLen, j * 4096);
+            k = (realLen.getInt(0) + 4) / 4096 + 1;
+         }
+         // Spigot end
          int l = k * 4096;
          ByteBuffer bytebuffer = ByteBuffer.allocate(l);
          this.f_63621_.read(bytebuffer, (long)(j * 4096));
